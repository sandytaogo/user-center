spring.application.serverId=0
spring.cloud.config.enabled=false
#In some cases, you may want to fail startup of a service if it cannot connect to the Config Server. 
#If this is the desired behavior, set the bootstrap configuration property 
# spring.cloud.config.fail-fast=true to make the client halt with an Exception.
spring.cloud.config.fail-fast=false

spring.cloud.config.discovery.enabled=false

spring.cloud.bootstrap.enabled=false
spring.application.name=user-center-application
server.port=8081
server.context-path=/
server.servlet.context-path=/


# Redis server host.
spring.redis.host=127.0.0.1
# Login password of the redis server.
spring.redis.password=
# Redis server port.
spring.redis.port=6379

# Session store type.
spring.session.store-type=redis
# Session timeout. If a duration suffix is not specified, seconds will be used.
server.servlet.session.timeout=7200
# Sessions flush mode.
spring.session.redis.flush-mode=on-save
# Namespace for keys used to store sessions.
spring.session.redis.namespace=spring:session

health.config.time-to-live=100000
#http://localhost:8500/ui/dc1/services
#consul.exe agent -server -bootstrap -advertise 127.0.0.1 -data-dir ./data -ui
#consul agent -server -bootstrap -advertise 127.0.0.1 -data-dir ./data -ui
spring.cloud.consul.host=127.0.0.1
spring.cloud.consul.port=8500
spring.cloud.consul.enabled=true
spring.cloud.consul.discovery.enabled=true
spring.cloud.consul.discovery.register=true
spring.cloud.consul.discovery.deregister=true
spring.cloud.consul.discovery.heartbeat.enabled=true
spring.cloud.consul.discovery.health-check-interval=60s
spring.cloud.consul.discovery.health-check-critical-timeout=60s
spring.cloud.consul.discovery.prefer-ip-address=true
spring.cloud.consul.discovery.serviceName=${spring.application.name}
spring.cloud.consul.discovery.instanceId=${spring.application.name}
#spring.cloud.consul.discovery.instance-id=${spring.application.name}:${server.port}
spring.cloud.refresh.refreshable=none

#mapper xml \u6587\u4EF6\u5730\u5740
#\u52A0\u8F7D\u5168\u5C40\u7684\u914D\u7F6E\u6587\u4EF6
#mybatis.configLocation: classpath:config/mybatis-config.xml
mybatis.typeAliasesPackage: com.sandy.**.domain
mybatis.mapper-locations=classpath*:mapper/*Mapper.xml
#mybatis.config-location=classpath:config/mybatis-config.xml
mybatis.configuration.cache-enabled=false
mybatis.type-handlers-package=com.sandy.ecp.mybatis.type
#mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
mybatis.configuration.log-impl=org.apache.ibatis.logging.slf4j.Slf4jImpl

management.security.enabled=false
management.health.consul.enabled=false
#management.health.elasticsearch.enabled=true
management.endpoint.prometheus.enabled=true
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.include=prometheus
management.metrics.export.prometheus.enabled=true
management.tags.application=${spring.application.name}


# db.createUser({user:"uc", pwd:"123456", roles:[{role:"root", db:"admin"}]})
#spring.data.mongodb.uri=mongodb://username:password@localhost:27017/databaseName
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=admin
spring.data.mongodb.username=admin
spring.data.mongodb.password=123456

solace.jms.enabled=false
solace.jms.host=smf://127.0.0.1:55554
solace.jms.msgVpn=default
solace.jms.clientUserName=default
solace.jms.clientPassword=default
solace.jms.defaultPubDestinationName=pkslow-topic
solace.jms.defaultSubDestinationName=pkslow-queue

logging.level.root=INFO
logging.level.org=INFO
logging.level.main.blog.mapper=INFO
logging.level.org.springframework=INFO
logging.level.com.sandy.user.*.*=INFO
logging.file.name=/usr/local/app/logs/user/catalina.log
logging.pattern.file=/usr/local/app/logs/user/catalina.%d{yyyy-MM-dd}.log